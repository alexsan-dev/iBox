{"ast":null,"code":"import React, { useEffect, useRef, useContext, useState } from 'react';\nimport firebase from '../credentials/servers';\nimport Dexie from 'dexie';\nimport 'firebase/auth'; //local DB\n\nlet db = {};\nexport const useDB = () => {\n  db = new Dexie(\"localDB\");\n  db.version(1).stores({\n    user: 'key, user'\n  });\n  db.open().then(() => console.log(\"OpenDB\")).catch(err => console.log(\"Error during open db \", err));\n}; // Intervals for states\n\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}; // Firebase Auth\n\nlet fbprovider, gprovider;\nexport const useLogout = () => firebase.auth().signOut();\nexport const setProviders = () => {\n  fbprovider = new firebase.auth.FacebookAuthProvider();\n  gprovider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().useDeviceLanguage();\n  fbprovider.setCustomParameters({\n    'display': 'popup'\n  });\n};\nexport const useLogin = (type, email, pass) => {\n  if (type === true) firebase.auth().createUserWithEmailAndPassword(email, pass);else if (type === false) firebase.auth().signInWithEmailAndPassword(email, pass);else if (type === \"fb\") firebase.auth().signInWithRedirect(fbprovider);else if (type === \"g\") firebase.auth().signInWithRedirect(gprovider);\n};\nexport const useAuth = listen => {\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) listen(user);else listen(false);\n    });\n    return () => unsubscribe();\n  }, []);\n};\nexport const user = firebase.auth().currentUser;","map":null,"metadata":{},"sourceType":"module"}