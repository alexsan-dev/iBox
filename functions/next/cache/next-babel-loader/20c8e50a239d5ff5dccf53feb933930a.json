{"ast":null,"code":"import React, { useEffect, useRef, useContext, useState } from 'react';\nimport firebase from '../credentials/servers';\nimport Dexie from 'dexie';\nimport 'firebase/auth'; //local DB\n\nlet db = {};\nexport const useDB = () => {\n  db = new Dexie(\"localDB\");\n  db.version(1).stores({\n    user: 'key, user'\n  });\n  db.open().then(() => console.log(\"OpenDB\")).catch(err => console.log(\"Error during open db \", err));\n}; // Intervals for states\n\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}; // Firebase Auth\n\nlet fbprovider, gprovider;\nexport const useLogout = () => firebase.auth().signOut();\nexport const setProviders = () => {\n  fbprovider = new firebase.auth.FacebookAuthProvider();\n  gprovider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().useDeviceLanguage();\n  fbprovider.setCustomParameters({\n    'display': 'popup'\n  });\n};\nexport const useLogin = async (type, email, pass) => {\n  if (type === true) return firebase.auth().createUserWithEmailAndPassword(email, pass);else if (type === false) return firebase.auth().signInWithEmailAndPassword(email, pass);else if (type === \"fb\") return firebase.auth().signInWithRedirect(fbprovider);else if (type === \"g\") return firebase.auth().signInWithRedirect(gprovider);\n};\nexport const useAuth = listen => {\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) listen(user);else listen(false);\n    });\n    return () => unsubscribe();\n  }, []);\n};\nexport const user = firebase.auth().currentUser;","map":{"version":3,"sources":["C:/Users/ernesto/Desktop/iBox/utils/hooks.js"],"names":["React","useEffect","useRef","useContext","useState","firebase","Dexie","db","useDB","version","stores","user","open","then","console","log","catch","err","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","fbprovider","gprovider","useLogout","auth","signOut","setProviders","FacebookAuthProvider","GoogleAuthProvider","useDeviceLanguage","setCustomParameters","useLogin","type","email","pass","createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithRedirect","useAuth","listen","unsubscribe","onAuthStateChanged","currentUser"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useContext, useState } from 'react';\nimport firebase from '../credentials/servers';\nimport Dexie from 'dexie';\nimport 'firebase/auth';\n\n//local DB\nlet db = {};\nexport const useDB = () => {\n  db = new Dexie(\"localDB\");\n  db.version(1).stores({ user: 'key, user' })\n  db.open().then(() => console.log(\"OpenDB\")).catch(err => console.log(\"Error during open db \", err));\n}\n\n// Intervals for states\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n// Firebase Auth\nlet fbprovider, gprovider;\nexport const useLogout = () => firebase.auth().signOut();\n\nexport const setProviders = () => {\n  fbprovider = new firebase.auth.FacebookAuthProvider();\n  gprovider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().useDeviceLanguage();\n  fbprovider.setCustomParameters({ 'display': 'popup' });\n}\n\nexport const useLogin = async (type, email, pass) => {\n  if (type === true) return firebase.auth().createUserWithEmailAndPassword(email, pass);\n  else if (type === false) return firebase.auth().signInWithEmailAndPassword(email, pass);\n  else if (type === \"fb\") return firebase.auth().signInWithRedirect(fbprovider);\n  else if (type === \"g\") return firebase.auth().signInWithRedirect(gprovider);\n}\n\nexport const useAuth = listen => {\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) listen(user);\n      else listen(false);\n    });\n    return () => unsubscribe();\n  }, []);\n}\n\nexport const user = firebase.auth().currentUser;\n"]},"metadata":{},"sourceType":"module"}